document.write('<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.2/axios.min.js"></script>');
document.write('<script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"></script>');
document.write('<script nomodule src="https://unpkg.com/@google/model-viewer/dist/model-viewer-legacy.js"></script>');
document.write('<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.6.0/jszip.js" integrity="sha512-djAJLNukP3WdWmwP/Y05w99aCX6u1jInpshdwiUKbXcQ9y/8BpMtsPsVrVyUbmtEx7wbqFpBq4sGOnIFVScFQQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>');
document.write('<script src="https://www.gstatic.com/firebasejs/9.9.4/firebase-app-compat.js"></script>');
document.write('<script src="https://www.gstatic.com/firebasejs/5.9.1/firebase.js"></script>');
document.write('<script>');
document.write('// XPERIENCE SHOPPING AVATAR DEMO SCREEN');
document.write('// Developed by Cameron King (github.com/cameronking4)');
document.write('var config = { apiKey: "AIzaSyDkVMB1m0DpAGIubJTpccff4ygaILhvPC4", authDomain: "xperience-webapp.firebaseapp.com", projectId: "xperience-webapp", storageBucket: "xperience-webapp.appspot.com", messagingSenderId: "522353425940", appId: "1:522353425940:web:a1325dc14e4e6485f67101"}; ');
document.write('firebase.initializeApp(config);');
document.write('var fileInput = document.getElementById(\'downloadBtn\');');
document.write('let XperienceID = localStorage.getItem(\'XperienceID\');');
document.write('let XperienceSuccess = localStorage.setItem(\'XperienceScanSuccess\', false);');
document.write('let XperienceAvatar;');
document.write('var XPERIENCEAVATAR; //avatar scan link (expires)');
document.write('var OBJfile; // converted GLB 2 OBJ file for measurement routine ');
document.write('const input = document.getElementById(\'fileupload\');');
document.write('const link = document.getElementById(\'link\');');
document.write('var TAG; // ghost download tag');
document.write('var GIBBLY; // final GLB file (Avatar source)');
document.write('var BLOB; // temporary GLB file');
document.write('var objResulted = false;');
document.write('var myOBJzip; var myOBJFinal;');
document.write('const PREFACE = "https://pure-castle-48918.herokuapp.com/"');
document.write('var mStatus = document.getElementById(\'MeasurementStatus\');');
document.write('var mStatusButton = document.getElementById(\'MeasurementStatusBtn\');');
document.write('var statusText = document.getElementById(\'statusText\');');
document.write('var aBlob; var newZipEntry;');
document.write('let measureRequest = \'\';');
document.write('let fbOBJurl;');
document.write('var measurements;');
document.write('');
document.write('var myHeaders = new Headers();');
document.write('myHeaders.append("Accept", "application/json");');
document.write('myHeaders.append("Authorization", "Bearer MnyJqyXV7Ooi3f6gAAejMbDwcfWOXxlG9ap0vc0botTvGfoJdT_saBaotdBuuumMdPhxqVqDn0TAN6vzwoPJFg");');
document.write('var requestOptions = {method: \'GET\', headers: myHeaders, redirect: \'follow\'};');
document.write('');
document.write('//Query params');
document.write('const queryString = window.location.search;');
document.write('console.log(queryString);');
document.write('const urlParams = new URLSearchParams(queryString);');
document.write('if (urlParams.has(\'XperienceID\')) { XperienceID = urlParams.get(\'XperienceID\');}');
document.write('');
document.write('// ajax helper');
document.write('function ajax(a, b, c) { // URL, callback, just a placeholder');
document.write('	c = new XMLHttpRequest; c.open(\'GET\', a); c.setRequestHeader("Accept", "application/json"); c.setRequestHeader("Authorization", "Bearer MnyJqyXV7Ooi3f6gAAejMbDwcfWOXxlG9ap0vc0botTvGfoJdT_saBaotdBuuumMdPhxqVqDn0TAN6vzwoPJFg"); c.onload = b; c.send();');
document.write('}');
document.write('');
document.write('// Functions //');
document.write('');
document.write('function fetchFromURLandConvert(url) {');
document.write('	fetch(url, { method: \'get\'})');
document.write('   .then(res => res.blob()).then(file => {');
document.write('      var newFile = new File([file], "model_T.glb", {type: "model/gltf-binary", lastModified:new Date().getTime()});');
document.write('      GIBBLY = newFile;');
document.write('      var storageRef = firebase.storage().ref(\'glb/\' + XperienceID + ".glb");');
document.write('      var task = storageRef.put(GIBBLY);');
document.write('      let fbGLB = storageRef.getDownloadURL().then(function(downloadURL) {');
document.write('        localStorage.setItem(\'XperienceGLBurl\', downloadURL);');
document.write('        fileInput.href = downloadURL;');
document.write('        return downloadURL;});');
document.write('      task.on(\'state_changed\', function progress(snapshot) {}, function error(err) {}, function complete(percentage) {}); ');
document.write('');
document.write('      var newHeaders = new Headers();');
document.write('      newHeaders.append("Referer", "https://fabconvert.com/convert/x/to/obj"); newHeaders.append("Accept-Encoding", "gzip, deflate, br"); newHeaders.append("Accept", "*/*");');
document.write('      var formdata = new FormData();');
document.write('      formdata.append("PageId", "1"); formdata.append("FromId", "22"); formdata.append("ToId", "6"); formdata.append("to:", "obj"); formdata.append("ImageFilename", "XperienceAvatar.glb"); formdata.append("Files", newFile);');
document.write('      var requestOptions = { method: \'POST\', headers: newHeaders, body: formdata };');
document.write('');
document.write('   		 fetch("https://fabconvert.com/Home/ConvertFile", requestOptions)');
document.write('        .then(res => res.text())');
document.write('        .then(function (html) {');
document.write('          objResulted = true;');
document.write('          var parser = new DOMParser();');
document.write('          var doc = parser.parseFromString(html, \'text/html\');');
document.write('          HREF= doc.getElementById(\'targetFile\'); HREF.click(); OBJfile = HREF.href;');
document.write('          getZipFile(OBJfile,\'XperienceOBJ\', \'application/zip\');');
document.write('        })');
document.write('        .catch(error => console.log(\'error\', error));');
document.write('      ');
document.write('    })');
document.write('    .catch((ex) => {');
document.write('      console.log("Unable to download GLB blob");');
document.write('      console.log(ex);');
document.write('    });');
document.write('}');
document.write('');
document.write('function getZipFile(url, name, type){');
document.write('	 fetch(url, { method: \'get\'})');
document.write('   .then(res => res.blob()).then(file => {');
document.write('    	var newFile = new File([file], name, {type: \'application/zip\', lastModified:new Date().getTime()});');
document.write('      myOBJzip = newFile;');
document.write('      parseZipFile(myOBJzip);');
document.write('      mStatus.innerHTML = "STATUS UPDATE: STARTED (GLB file successfully zipped to OBJ format)"');
document.write('    })');
document.write('    .catch((ex) => {console.log(ex);});');
document.write('}');
document.write('');
document.write('function parseZipFile(zipFile) {');
document.write('  JSZip.loadAsync(zipFile).then(');
document.write('    function(zip) {');
document.write('		 const fileParsePromises = [];');
document.write('     zip.forEach(function(relativePath, zipEntry) {');
document.write('        console.log(\' -> Parsing \' + zipEntry.name + \' ...\');');
document.write('        fileParsePromises.push(');
document.write('          zipEntry.async(\'string\').then(function(data) {');
document.write('            aBlob = data; newZipEntry = zipEntry;           ');
document.write('            return { name: zipEntry.name, textData: data, zipEntry: zipEntry};}));');
document.write('      });');
document.write('      Promise.all(fileParsePromises).then(processDecompressedFiles);');
document.write('    },');
document.write('    function(error) { console.error(\'An error occurred processing the zip file.\', error);');
document.write('    });');
document.write('}');
document.write('');
document.write('function processDecompressedFiles(decompressedFiles) {');
document.write('		var binaryData = [];');
document.write('    binaryData.push(aBlob);');
document.write('    myOBJzip = window.URL.createObjectURL(new Blob(binaryData, {type: "application/object"}))');
document.write(' 	  var newFile = new File(binaryData, \'XperienceAvarar.obj\', {type: \'application/object\', lastModified:new Date().getTime()});');
document.write('    myOBJFinal = newFile;');
document.write('    var storageRef = firebase.storage().ref(\'obj/\' + XperienceID + ".obj");');
document.write('		var task = storageRef.put(myOBJFinal);');
document.write('    task.on(\'state_changed\', ');
document.write('        function progress() {}, function error(err) {}, function complete() {}');
document.write('    ); ');
document.write('    fbOBJurl = storageRef.getDownloadURL().then(function(downloadURL) {localStorage.setItem(\'XperienceOBJurl\', downloadURL);});');
document.write('    console.log(\'Final OBJ returned\');');
document.write('    mStatus.innerHTML = "STATUS UPDATE: LOADED (OBJ format loaded, now processing...)"');
document.write('}');
document.write('');
document.write('async function getMeasureRequest(objURL) {');
document.write('	var myHeaders = new Headers();');
document.write('  myHeaders.append("Origin", "https://photo-to-3d.3dmeasureup.com");');
document.write('  myHeaders.append("x-api-key", "NnDJOObcpItYZQPySFKJURBeZEmNvqjZCRSvlPhYV");');
document.write('  myHeaders.append("Content-Type", "application/json");');
document.write('  console.log(fbOBJurl);');
document.write('  var raw = JSON.stringify({ "type": "all", "fileurl": fbOBJurl, "auto_align": true, "filesource": "url", "filetype": "obj", "output": "json"});');
document.write('');
document.write('  const request = await fetch(PREFACE +"https://api.3dmu.prototechsolutions.com/prod/models/measure", { method: \'POST\', headers: myHeaders, body: raw, redirect: \'follow\'})');
document.write('    .then(res => res.json()) ');
document.write('  	.then(data => {');
document.write('    	measureRequest = data.requestId;');
document.write('      console.log(\'MEASURE REQUEST \', measureRequest);');
document.write('      mStatus.innerHTML = "STATUS UPDATE: THE MAGIC IS HAPPENING! (Analyzing OBJ file....)"');
document.write('    })');
document.write('    .catch(error => console.log(\'error\', error));');
document.write('  this.request = request;');
document.write('');
document.write(' 	function calculate() {');
document.write(' 	 fetch(PREFACE +"https://api.3dmu.prototechsolutions.com/prod/models/metrics?requestId=" + measureRequest, {method: \'GET\', headers: myHeaders, redirect: \'follow\'})');
document.write('    .then(res => res.json()) ');
document.write('  	.then(data => {');
document.write('      if(data.statusCode == "200"){');
document.write('        measurements = data.body.result;');
document.write('        localStorage.setItem(\'xMeasurements\', measurements);');
document.write('        console.log(\'MEASUREMENTS CALCULATED\', measurements);');
document.write('        statusText.innerHTML = \'Your measurements have been calculated!\';');
document.write('        mStatus.style.display = \'none\'; mStatusButton.style.display = \'flex\'; mStatusButton.href = \'/measurements\';');
document.write('      }');
document.write('      else{ setTimeout(calculate, 3000); }');
document.write('    })');
document.write('    .catch(error => console.log(\'error\', error));');
document.write('  }');
document.write('  setTimeout(calculate, 1000);');
document.write('}');
document.write('');
document.write('function refresh() {');
document.write('	//Poll for avatar results, if exists, break cycle & display assets');
document.write('  let vData = localStorage.getItem(\'XperienceGLBurl\');');
document.write('  let xMeasure = localStorage.getItem(\'xMeasurements\');');
document.write('  if( vData != null || xMeasure == true) {');
document.write('  	modelViewer.src = PREFACE + vData;');
document.write('    statusText.innerHTML = \'Your measurements have been calculated!\';');
document.write('    mStatus.style.display = \'none\'; mStatusButton.style.display = \'flex\';');
document.write('    mStatusButton.href = \'/measurements\'; fileInput.href = vData;');
document.write('    console.log(xMeasure);');
document.write('  }');
document.write('  else {');
document.write('    if (XPERIENCEAVATAR != null || XperienceSuccess == true) {');
document.write('      let modelViewer = document.getElementById("modelViewer");');
document.write('      modelViewer.src = PREFACE + XPERIENCEAVATAR;');
document.write('      fetchFromURLandConvert(PREFACE + XPERIENCEAVATAR);');
document.write('      fbOBJurl = localStorage.getItem("XperienceOBJurl");');
document.write('      getMeasureRequest(fbOBJurl);');
document.write('    } else { //poll');
document.write('      ajax(PREFACE + "https://api.developer.in3d.io/scans/" + XperienceID + "/result?type=glb",');
document.write('       function(e) {');
document.write('        var data = JSON.parse(this.response);');
document.write('        XPERIENCEAVATAR = data.url;');
document.write('      });');
document.write('      setTimeout(refresh, 1000);');
document.write('    }');
document.write('    XperienceSuccess = localStorage.setItem(\'XperienceScanSuccess\', true);');
document.write('    fileInput.href = XPERIENCEAVATAR;');
document.write('    fileInput.download = "MyXperienceAvatar.glb";');
document.write('    }');
document.write('}');
document.write('setTimeout(refresh, 1000);');
document.write('document.getElementById("shareLink").addEventListener("click", navigator.clipboard.writeText(window.location).then(() => {alert(\'Xperience Avatar link copied!\')}, () => {/*failed*/}));');
document.write('</script> ');
